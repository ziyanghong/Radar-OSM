// This file has been generated by Py++.

#include <boost/python.hpp>
#include <boost/python/iterator.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
#include <boost/python/suite/indexing/map_indexing_suite.hpp>

#include "objects.h"
#include "coordinates.h"

namespace bp = boost::python;

struct Objects_wrapper : Objects, bp::wrapper< Objects > {

    Objects_wrapper(Objects const & arg )
    : Objects( arg )
      , bp::wrapper< Objects >(){
        // copy constructor
        
    }

    struct tReference_wrapper : Objects::tReference, bp::wrapper< Objects::tReference > {
    
        tReference_wrapper(Objects::tReference const & arg )
        : Objects::tReference( arg )
          , bp::wrapper< Objects::tReference >(){
            // copy constructor
            
        }
    
        tReference_wrapper( )
        : Objects::tReference( )
          , bp::wrapper< Objects::tReference >(){
            // null constructor
        
        }
    
        tReference_wrapper(::std::string sha )
        : Objects::tReference( sha )
          , bp::wrapper< Objects::tReference >(){
            // constructor
        
        }
    
        static ::Objects::tObject * get_ptr(Objects::tReference const & inst ){
            return inst.ptr;
        }
        
        static void set_ptr( Objects::tReference & inst, ::Objects::tObject * new_value ){ 
            inst.ptr = new_value;
        }
    
    };

    Objects_wrapper(bool verbose=false )
    : Objects( verbose )
      , bp::wrapper< Objects >(){
        // constructor
    
    }

};

BOOST_PYTHON_MODULE(osm_objects){
    { //::Coordinates
        typedef bp::class_< Coordinates > Coordinates_exposer_t;
        Coordinates_exposer_t Coordinates_exposer = Coordinates_exposer_t( "Coordinates", bp::init< Coordinates::tGeographic >(( bp::arg("geo") )) );
        bp::scope Coordinates_scope( Coordinates_exposer );
        bp::class_< Coordinates::tCartesian >( "tCartesian", bp::init< >() )    
        .def( bp::init< double, double >(( bp::arg("x"), bp::arg("y") )) )    
        .def( bp::self * bp::other< double >() )    
        .def( bp::self + bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self / bp::other< double >() )    
        .def_readwrite( "x", &Coordinates::tCartesian::x )    
        .def_readwrite( "y", &Coordinates::tCartesian::y );
        bp::class_< Coordinates::tGeographic >( "tGeographic", bp::init< >() )    
        .def( bp::init< double, double >(( bp::arg("lat"), bp::arg("lon") )) )    
        .def( bp::self * bp::other< double >() )    
        .def( bp::self + bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self / bp::other< double >() )    
        .def_readwrite( "lat", &Coordinates::tGeographic::lat )    
        .def_readwrite( "lon", &Coordinates::tGeographic::lon );
        bp::implicitly_convertible< Coordinates::tGeographic, Coordinates >();
        { //::Coordinates::cartesianToLatLon
            
            typedef ::Coordinates::tGeographic ( ::Coordinates::*cartesianToLatLon_function_type )( ::Coordinates::tCartesian ) ;
            
            Coordinates_exposer.def( 
                                    "cartesianToLatLon"
                                    , cartesianToLatLon_function_type( &::Coordinates::cartesianToLatLon )
                                    , ( bp::arg("cart") ) );
            
        }
        { //::Coordinates::latLonToCartesian
            
            typedef ::Coordinates::tCartesian ( ::Coordinates::*latLonToCartesian_function_type )( ::Coordinates::tGeographic ) ;
            
            Coordinates_exposer.def( 
                                    "latLonToCartesian"
                                    , latLonToCartesian_function_type( &::Coordinates::latLonToCartesian )
                                    , ( bp::arg("geo") ) );
            
        }
        { //::Coordinates::latLonToDistance
            
            typedef double ( ::Coordinates::*latLonToDistance_function_type )( ::Coordinates::tGeographic,::Coordinates::tGeographic ) ;
            
            Coordinates_exposer.def( 
                                    "latLonToDistance"
                                    , latLonToDistance_function_type( &::Coordinates::latLonToDistance )
                                    , ( bp::arg("geo0"), bp::arg("geo1") ) );
            
        }
    }

    { //::std::vector< Objects::tReference >
        typedef bp::class_< std::vector< Objects::tReference > > vector_less__Objects_scope_tReference__greater__exposer_t;
        vector_less__Objects_scope_tReference__greater__exposer_t vector_less__Objects_scope_tReference__greater__exposer = vector_less__Objects_scope_tReference__greater__exposer_t( "vector_less__Objects_scope_tReference__greater_" );
        bp::scope vector_less__Objects_scope_tReference__greater__scope( vector_less__Objects_scope_tReference__greater__exposer );
        vector_less__Objects_scope_tReference__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< Objects::tReference > >() );
    }
    { //::std::map< std::string, std::string >
        typedef bp::class_< Objects::tags_t > tags_t_exposer_t;
        tags_t_exposer_t tags_t_exposer = tags_t_exposer_t( "tags_t" );
        bp::scope tags_t_scope( tags_t_exposer );
        tags_t_exposer.def( bp::map_indexing_suite< ::std::map< std::string, std::string > >() );
    }
    { //::std::set<tObject*>
        typedef bp::class_< Objects::objects_t > objects_t_exposer_t;
        objects_t_exposer_t objects_t_exposer = objects_t_exposer_t( "objects_t" );
        objects_t_exposer.def("__iter__", bp::range(&Objects::objects_t::begin,&Objects::objects_t::end));
        objects_t_exposer.def("__len__", &Objects::objects_t::size);
    }
    { //::Objects
        typedef bp::class_< Objects_wrapper > Objects_exposer_t;
        Objects_exposer_t Objects_exposer = Objects_exposer_t( "Objects", bp::init< bp::optional< bool > >(( bp::arg("verbose")=(bool)(false) )) );
        bp::scope Objects_scope( Objects_exposer );
        bp::class_< Objects::tBox >( "tBox", bp::init< >() )    
            .def_readwrite( "ori", &Objects::tBox::ori )    
            .def_readwrite( "pos", &Objects::tBox::pos )    
            .def_readwrite( "size", &Objects::tBox::size );
        { //::Objects::tObject
            typedef bp::class_< Objects::tObject, bp::bases<>, Objects::tObject* > tObject_exposer_t;
            tObject_exposer_t tObject_exposer = tObject_exposer_t( "tObject", bp::init< >() );
            bp::scope tObject_scope( tObject_exposer );
            tObject_exposer.def( bp::init< boost::variant< Objects::tPoint, Objects::tPolyline, Objects::tBox, Objects::tRelation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_ > >(( bp::arg("payload") )) );
            bp::implicitly_convertible< boost::variant< Objects::tPoint, Objects::tPolyline, Objects::tBox, Objects::tRelation, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_ >, Objects::tObject >();
            tObject_exposer.def_readwrite( "kind", &Objects::tObject::kind );
            tObject_exposer.def_readwrite( "payload", &Objects::tObject::payload );
            tObject_exposer.def_readwrite( "sha", &Objects::tObject::sha );
            tObject_exposer.def_readwrite( "tag", &Objects::tObject::tag );
            tObject_exposer.def_readwrite( "type", &Objects::tObject::type );
            tObject_exposer.def_readwrite( "use", &Objects::tObject::use );
            tObject_exposer.def("isRelation", &Objects::tObject::isType<Objects::tRelation>);
            tObject_exposer.def("getRelation", &Objects::tObject::getPayload<Objects::tRelation>, bp::return_internal_reference<>() );
            tObject_exposer.def("isPoint", &Objects::tObject::isType<Objects::tPoint>);
            tObject_exposer.def("getPoint", &Objects::tObject::getPayload<Objects::tPoint>, bp::return_internal_reference<>() );
            tObject_exposer.def("isPolyline", &Objects::tObject::isType<Objects::tPolyline>);
            tObject_exposer.def("getPolyline", &Objects::tObject::getPayload<Objects::tPolyline>, bp::return_internal_reference<>() );
            tObject_exposer.def("isBox", &Objects::tObject::isType<Objects::tBox>);
            tObject_exposer.def("getBox", &Objects::tObject::getPayload<Objects::tBox>, bp::return_internal_reference<>() );
            tObject_exposer.def("getTag", &Objects::tObject::getTag, bp::return_internal_reference<>() );
        }
        bp::class_< Objects::tOrientation >( "tOrientation", bp::init< >() )    
            .def( bp::init< double, double, double >(( bp::arg("roll"), bp::arg("pitch"), bp::arg("yaw") )) )    
            .def_readwrite( "pitch", &Objects::tOrientation::pitch )    
            .def_readwrite( "roll", &Objects::tOrientation::roll )    
            .def_readwrite( "yaw", &Objects::tOrientation::yaw );
        bp::class_< Objects::tPoint >( "tPoint", bp::init< >() )
            .def( bp::init< Coordinates::tGeographic, double >(( bp::arg("geo"), bp::arg("alt") )) )
            .def_readwrite( "alt", &Objects::tPoint::alt )
            .def_readwrite( "geo", &Objects::tPoint::geo );
        bp::class_< Objects::tPolyline >( "tPolyline", bp::init< >() )    
            .def_readwrite( "points", &Objects::tPolyline::points );
        bp::class_< Objects::tRange >( "tRange" )    
            .def_readwrite( "geo_max", &Objects::tRange::geo_max )    
            .def_readwrite( "geo_min", &Objects::tRange::geo_min );
        { //::Objects::tReference
            typedef bp::class_< Objects_wrapper::tReference_wrapper > tReference_exposer_t;
            tReference_exposer_t tReference_exposer = tReference_exposer_t( "tReference", bp::init< >() );
            bp::scope tReference_scope( tReference_exposer );
            tReference_exposer.def( bp::init< std::string >(( bp::arg("sha") )) );
            bp::implicitly_convertible< std::string, Objects::tReference >();
            tReference_exposer.add_property( "ptr"
                        , bp::make_function( (::Objects::tObject * (*)( ::Objects::tReference const & ))(&Objects_wrapper::tReference_wrapper::get_ptr), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::Objects::tReference &,::Objects::tObject * ))(&Objects_wrapper::tReference_wrapper::set_ptr), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
            tReference_exposer.def_readwrite( "sha", &Objects::tReference::sha );
        }
        bp::class_< Objects::tRelation >( "tRelation", bp::init< >() )    
            .def_readwrite( "objects", &Objects::tRelation::objects );
        bp::class_< Objects::tSize >( "tSize", bp::init< >() )    
            .def( bp::init< double, double, double >(( bp::arg("length"), bp::arg("width"), bp::arg("height") )) )    
            .def_readwrite( "height", &Objects::tSize::height )    
            .def_readwrite( "length", &Objects::tSize::length )    
            .def_readwrite( "width", &Objects::tSize::width );
        bp::implicitly_convertible< bool, Objects >();
        { //::Objects::addObject
        
            typedef void ( ::Objects::*addObject_function_type )( ::Objects::tObject * ) ;
            
            Objects_exposer.def( 
                "addObject"
                , addObject_function_type( &::Objects::addObject )
                , ( bp::arg("object") ) );
        
        }
        {
            Objects_exposer.def("__iter__", bp::range(&Objects::begin,&Objects::end));
            Objects_exposer.def("getObject", &::Objects::getObject, bp::return_internal_reference<>());
        }
        { //::Objects::delObject
        
            typedef void ( ::Objects::*delObject_function_type )( ::std::_Rb_tree_const_iterator< Objects::tObject* > & ) ;
            
            Objects_exposer.def( 
                "delObject"
                , delObject_function_type( &::Objects::delObject )
                , ( bp::arg("it") ) );
        
        }
        { //::Objects::deleteInvalidObjects
        
            typedef int ( ::Objects::*deleteInvalidObjects_function_type )(  ) ;
            
            Objects_exposer.def( 
                "deleteInvalidObjects"
                , deleteInvalidObjects_function_type( &::Objects::deleteInvalidObjects ) );
        
        }
        { //::Objects::deleteUnusedPoints
        
            typedef int ( ::Objects::*deleteUnusedPoints_function_type )(  ) ;
            
            Objects_exposer.def( 
                "deleteUnusedPoints"
                , deleteUnusedPoints_function_type( &::Objects::deleteUnusedPoints ) );
        
        }
        { //::Objects::getMapRange
        
            typedef ::Objects::tRange ( ::Objects::*getMapRange_function_type )(  ) ;
            
            Objects_exposer.def( 
                "getMapRange"
                , getMapRange_function_type( &::Objects::getMapRange ) );
        
        }
        { //::Objects::getObjectsInRange
        
            typedef ::std::set< Objects::tObject* > ( ::Objects::*getObjectsInRange_function_type )( ::Objects::tRange ) ;
            
            Objects_exposer.def( 
                "getObjectsInRange"
                , getObjectsInRange_function_type( &::Objects::getObjectsInRange )
                , ( bp::arg("range") ) );
        
        }
        { //::Objects::loadFromFile
        
            typedef bool ( ::Objects::*loadFromFile_function_type )( ::std::string ) ;
            
            Objects_exposer.def( 
                "loadFromFile"
                , loadFromFile_function_type( &::Objects::loadFromFile )
                , ( bp::arg("filename") ) );
        
        }
        { //::Objects::modPointer
        
            typedef void ( ::Objects::*modPointer_function_type )( ::Objects::tReference &,::Objects::tObject *,bool ) ;
            
            Objects_exposer.def( 
                "modPointer"
                , modPointer_function_type( &::Objects::modPointer )
                , ( bp::arg("ref"), bp::arg("object"), bp::arg("add") ) );
        
        }
        { //::Objects::modPointers
        
            typedef void ( ::Objects::*modPointers_function_type )( ::Objects::tObject *,bool ) ;
            
            Objects_exposer.def( 
                "modPointers"
                , modPointers_function_type( &::Objects::modPointers )
                , ( bp::arg("object"), bp::arg("add") ) );
        
        }
        { //::Objects::numberOfObjects
        
            typedef int ( ::Objects::*numberOfObjects_function_type )(  ) ;
            
            Objects_exposer.def( 
                "numberOfObjects"
                , numberOfObjects_function_type( &::Objects::numberOfObjects ) );
        
        }
        { //::Objects::saveToFile
        
            typedef bool ( ::Objects::*saveToFile_function_type )( ::std::string ) ;
            
            Objects_exposer.def( 
                "saveToFile"
                , saveToFile_function_type( &::Objects::saveToFile )
                , ( bp::arg("filename") ) );
        
        }
        { //::Objects::splitPolylines
        
            typedef void ( ::Objects::*splitPolylines_function_type )( ::std::string ) ;
            
            Objects_exposer.def( 
                "splitPolylines"
                , splitPolylines_function_type( &::Objects::splitPolylines )
                , ( bp::arg("type") ) );
        
        }
    }

    { //::utils::get_file_extension
    
        typedef ::std::string ( *get_file_extension_function_type )( ::std::string const & );
        
        bp::def( 
            "get_file_extension"
            , get_file_extension_function_type( &::utils::get_file_extension )
            , ( bp::arg("filename") ) );
    
    }

    { //::utils::rand_sha
    
        typedef ::std::string ( *rand_sha_function_type )( int );
        
        bp::def( 
            "rand_sha"
            , rand_sha_function_type( &::utils::rand_sha )
            , ( bp::arg("length")=(int)(40) ) );
    
    }
}
